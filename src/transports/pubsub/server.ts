import type { PubSubCtx } from './base';

/**
 * Represents the unique identifier for a client connected to the PubSub transport.
 * This ID is used for targeted message publishing.
 */
export type PubSubClientId = string;

/**
 * Represents an active client connection session on the server.
 * This object provides a standardized way for the `EventServer` to interact
 * with a connection, regardless of the underlying transport protocol.
 */
export interface PubSubServerSession {
  /**
   * A unique identifier for the session, typically generated by the transport layer upon connection.
   */
  id: string;
  /**
   * The unique identifier for the client associated with this session.
   */
  clientId?: PubSubClientId;
  /**
   * The protocol being used for this session (e.g., 'sse', 'ws', 'ipc').
   */
  protocol: 'sse' | 'ws' | 'ipc' | string;
  /**
   * Sends an event and data to the client associated with this session.
   * @param event The name of the event to send.
   * @param data The payload for the event.
   * @param ctx Optional context for the PubSub operation.
   */
  send: (event: string, data: any, ctx?: PubSubCtx) => void;
  /**
   * Closes the connection for this session.
   */
  close: () => void;
  /**
   * A reference to the raw, underlying connection object or handle
   * (e.g., a Node.js `ServerResponse` for SSE, or a WebSocket instance).
   * Use with caution as it is transport-specific.
   */
  raw?: any;
}

/**
 * Defines the interface for a server-side PubSub transport layer.
 *
 * This abstraction allows the `EventServer` to operate independently of the
 * underlying real-time communication protocol (e.g., SSE, WebSockets, IPC).
 * An implementation of this interface is responsible for managing client
 * connections, subscriptions, and message passing.
 */
export interface IPubSubServerTransport {
  /**
   * A unique, human-readable name for the transport (e.g., 'sse', 'websocket').
   */
  readonly name: string;
  /**
   * The protocol identifier.
   */
  readonly protocol: 'sse' | 'ws' | 'ipc' | string;

  /**
   * Connects a client, establishing a persistent communication channel.
   *
   * This method is designed to be generic. Transport-specific details, such as
   * HTTP request/response objects, are passed inside the `options` parameter.
   * For protocols like SSE, initial events can be passed to be subscribed to at connection time.
   *
   * @param options A container for transport-specific parameters, including optional initial events.
   * @returns A `PubSubServerSession` object representing the newly connected client session.
   */
  connect: (
    options?: {
      req: any; // e.g., http.IncomingMessage
      res: any; // e.g., http.ServerResponse
      clientId?: PubSubClientId;
      events?: string[];
      [k: string]: any;
    }
  ) => PubSubServerSession;

  /**
   * Subscribes a client session to one or more events.
   *
   * Note: Not all transports may support subscribing to new events after the
   * initial connection. For transports like SSE, this might be a no-op or
   * throw an error.
   *
   * @param session The `PubSubServerSession` of the client.
   * @param events An array of event names to subscribe to.
   */
  subscribe: (session: PubSubServerSession, events: string[]) => void;

  /**
   * Unsubscribes a client session from one or more events.
   *
   * Note: Not all transports may support unsubscribing from events after the
   * initial connection. For transports like SSE, this might be a no-op or
   * throw an error.
   *
   * @param session The `PubSubServerSession` of the client.
   * @param events An array of event names to unsubscribe from.
   */
  unsubscribe: (session: PubSubServerSession, events: string[]) => void;

  /**
   * Publishes an event from the server to connected clients.
   *
   * The transport implementation should handle broadcasting to all relevant
   * clients or targeting specific clients based on the `target` parameter.
   *
   * @param event The name of the event to publish.
   * @param data The payload for the event.
   * @param target Optional. Specifies the recipient(s) of the event.
   *   If omitted, the event is typically broadcast to all subscribed clients.
   * @param target.clientId A single `PubSubClientId` or an array of IDs to
   *   send the event to.
   * @param ctx Optional context for the PubSub operation.
   */
  publish: (
    event: string,
    data: any,
    target?: { clientId?: PubSubClientId | PubSubClientId[] },
    ctx?: PubSubCtx
  ) => void;

  /**
   * Registers a callback to be invoked when a new client connection is established
   * and a session is created.
   * @param cb The callback function that receives the new `PubSubServerSession`.
   */
  onConnection: (cb: (session: PubSubServerSession) => void) => void;

  /**
   * Registers a callback to be invoked when a client disconnects.
   * @param cb The callback function that receives the `PubSubServerSession` of the
   *   disconnected client.
   */
  onDisconnect: (cb: (session: PubSubServerSession) => void) => void;

  /**
   * Optional. Registers a callback to handle incoming messages from clients.
   * This is only necessary for bidirectional transport protocols like WebSockets or IPC.
   *
   * @param cb The callback function that receives the session, event name, data, and context.
   */
  onMessage?: (
    cb: (
      session: PubSubServerSession,
      event: string,
      data: any,
      ctx?: PubSubCtx
    ) => void
  ) => void;

  /**
   * Optional. Finds and returns a session based on a request object.
   * This is used by higher-level tools to find the correct session
   * for operations like adding a subscription via a generic RPC call.
   * @param req The request object (e.g., http.IncomingMessage or Electron.IpcMainEvent).
   * @returns The corresponding session, or undefined if not found.
   */
  getSessionFromReq?: (req: any) => PubSubServerSession | undefined;
}
